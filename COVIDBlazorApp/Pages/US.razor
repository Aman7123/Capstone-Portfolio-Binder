@page "/"
@inject HttpClient Http
@inject IConfiguration Configuration
<h2><b>Current US COVID Statistics</b></h2>
@if (todayDT == null || stopDT == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        <b>Today: </b>@todayDT.ToString()<br />
        <b>Last Date: </b>@stopDT.ToString()
    </p>
}
@if (endPoint == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>@endPoint</p>
}
@if (exception == null)
{
    <p><em>Loaded with no errors :)</em></p>
}
else
{
    <p>@exception</p>
}

@if (unitedStates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Pos. Cases</th>
                <th>Neg. Cases</th>
                <th>New Cases</th>
                <th>New Neg. Tests</th>
                <th>Curr. Hosp.</th>
                <th>New Hosp.</th>
                <th>Cum. Hosp.</th>
                <th>Curr. ICU</th>
                <th>Cum. ICU</th>
                <th>Total Deaths</th>
                <th>New Deaths</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var us in unitedStates)
            {
            <tr>
                <td>@us.date</td>
                <td>@us.positive</td>
                <td>@us.negative</td>
                <td>@us.positiveIncrease</td>
                <td>@us.negativeIncrease</td>
                <td>@us.hospitalizedCurrently</td>
                <td>@us.hospitalizedIncrease</td>
                <td>@us.hospitalizedCumulative</td>
                <td>@us.inIcuCurrently</td>
                <td>@us.inIcuCumulative</td>
                <td>@us.death</td>
                <td>@us.deathIncrease</td>
            </tr>
            }
        </tbody>
    </table>
}

<h4>
    <b>Authors: Daniel Carson &amp; Aaron Renner</b>
</h4>
<h4>
    <b>Data Source:</b> <a href="http://www.covidtracking.com">The COVID Tracking Project</a>
</h4>

@code {
    private List<USData> unitedStates;
    private int today;
    private DateTime todayDT;
    private DateTime stopDT;
    private string endPoint;
    private string exception;
    protected override async Task OnInitializedAsync()
    {
        string currentUSEndPoint = Configuration["EndPoints:USEndPoints:CurrentUSEndpoint"];
        string historicUSDateEndPoint = Configuration["EndPoints:USEndPoints:HistoricUSDateEndpoint"];
        USData[] currentUS;
        unitedStates = new List<USData>();
        currentUS = await Http.GetFromJsonAsync<USData[]>(currentUSEndPoint);
        if (currentUS.Length > 0)
        {
            unitedStates.Add(currentUS[0]);
            //YYYYMMDD
            today = currentUS[0].date;
            try
            {
                int d = today % 100;
                int m = (today / 100) % 100;
                int y = today / 10000;
                todayDT = new DateTime(y, m, d);
                // ... Days, hours, minutes, seconds, milliseconds.
                TimeSpan oneDay = new TimeSpan(1, 0, 0, 0, 0);
                TimeSpan fiveDays = new TimeSpan(5, 0, 0, 0, 0);
                stopDT = todayDT - fiveDays;
                DateTime yesterdayDT = todayDT - oneDay;
                while (yesterdayDT >= stopDT)
                {
                    string yyyy, mm, dd, yyyymmdd;
                    yyyy = yesterdayDT.Year.ToString();
                    mm = yesterdayDT.Month.ToString();
                    dd = yesterdayDT.Day.ToString();
                    if (mm.Length < 2)
                    {
                        mm = "0" + mm;
                    }
                    if (dd.Length < 2)
                    {
                        dd = "0" + dd;
                    }
                    yyyymmdd = yyyy + mm + dd;
                    endPoint = historicUSDateEndPoint.Replace("YYYYMMDD", yyyymmdd);
                    USData response = await Http.GetFromJsonAsync<USData>(endPoint);
                    if (response != null)
                    {
                        unitedStates.Add(response);
                    }
                    else
                    {
                        break;
                    }
                    yesterdayDT = yesterdayDT - oneDay;
                }
            }
            catch (Exception ex)
            {
                todayDT = DateTime.Now;
                exception = ex.Message;
            }
        }
    }
}

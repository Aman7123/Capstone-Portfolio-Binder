@page "/"
@inject HttpClient Http
@inject IConfiguration Configuration

<h2><b>Current US COVID Statistics</b></h2>

@if (unitedStates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (todayDisplay != null && stopDisplay != null)
    {
        <p>
            <b>Today: </b>@todayDisplay<br />
            <b>Last Date: </b>@stopDisplay
        </p>
    }
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Pos. Cases</th>
                <th>Neg. Cases</th>
                <th>New Cases</th>
                <th>New Neg. Tests</th>
                <th>Curr. Hosp.</th>
                <th>New Hosp.</th>
                <th>Cum. Hosp.</th>
                <th>Curr. ICU</th>
                <th>Cum. ICU</th>
                <th>Total Deaths</th>
                <th>New Deaths</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var us in unitedStates)
            {
                <tr>
                    <td>@us.displayDate</td>
                    <td>@us.positive</td>
                    <td>@us.negative</td>
                    <td>@us.positiveIncrease</td>
                    <td>@us.negativeIncrease</td>
                    <td>@us.hospitalizedCurrently</td>
                    <td>@us.hospitalizedIncrease</td>
                    <td>@us.hospitalizedCumulative</td>
                    <td>@us.inIcuCurrently</td>
                    <td>@us.inIcuCumulative</td>
                    <td>@us.death</td>
                    <td>@us.deathIncrease</td>
                </tr>
            }
        </tbody>
    </table>
    @if (exception.Length > 0)
    {
        <p>@exception</p>
    }
    else
    {
        <p><em>Loaded with no errors :)</em></p>
    }
}

<h4>
    <b>Authors: Daniel Carson &amp; Aaron Renner</b>
</h4>
<h4>
    <b>Data Source:</b> <a href="http://www.covidtracking.com">The COVID Tracking Project</a>
</h4>

@code {
    private List<USData> unitedStates;
    private string todayDisplay, stopDisplay;
    private DateTime todayDT;
    private DateTime stopDT;
    private string endPoint;
    private string exception;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            string currentUSEndPoint = Configuration["EndPoints:USEndPoints:CurrentUSEndpoint"];
            string historicUSDateEndPoint = Configuration["EndPoints:USEndPoints:HistoricUSDateEndpoint"];
            USData[] currentUS = await Http.GetFromJsonAsync<USData[]>(currentUSEndPoint);
            if (currentUS.Length > 0)
            {
                int today = currentUS[0].date;
                int day = today % 100;
                int mon = (today / 100) % 100;
                int year = today / 10000;
                todayDT = new DateTime(year, mon, day);
                currentUS[0].dateTime = todayDT;
                currentUS[0].displayDate = todayDT.ToString().Substring(0, 10);
                unitedStates = new List<USData>();
                unitedStates.Add(currentUS[0]);
                TimeSpan oneDay = new TimeSpan(1, 0, 0, 0, 0);
                DateTime yesterdayDT = todayDT - oneDay;
                stopDT = todayDT - (oneDay * 9);
                todayDisplay = todayDT.ToString("dddd, dd MMMM yyyy");
                stopDisplay = stopDT.ToString("dddd, dd MMMM yyyy");
                while (yesterdayDT >= stopDT)
                {
                    string yyyy, mm, dd, yyyymmdd;
                    yyyy = yesterdayDT.Year.ToString();
                    mm = yesterdayDT.Month.ToString();
                    dd = yesterdayDT.Day.ToString();
                    if (mm.Length < 2)
                    {
                        mm = "0" + mm;
                    }
                    if (dd.Length < 2)
                    {
                        dd = "0" + dd;
                    }
                    yyyymmdd = yyyy + mm + dd;
                    endPoint = historicUSDateEndPoint.Replace("YYYYMMDD", yyyymmdd);
                    USData response = await Http.GetFromJsonAsync<USData>(endPoint);
                    if (response != null)
                    {
                        response.dateTime = yesterdayDT;
                        response.displayDate = yesterdayDT.ToString().Substring(0, 10);
                        unitedStates.Add(response);
                    }
                    else
                    {
                        break;
                    }
                    yesterdayDT = yesterdayDT - oneDay;
                }
                exception = "";
            }
        }
        catch (Exception ex)
        {
            exception = ex.Message;
        }
    }
}

@page "/states-current"
@inject HttpClient Http
@inject IConfiguration Configuration

<h2><b>Current States COVID Statistics</b></h2>

<EditForm class="form-inline my-2" Model="@stateForm" OnValidSubmit="ChooseState">
    <b><label for="stateCode">State Code</label></b>
    <InputText class="form-control mx-2" id="stateCode" @bind-Value="stateForm.StateCode" />
    <button class="btn btn-outline-primary" type="submit">Submit</button>
</EditForm>

@if (endPoint != null)
{
    <p>@endPoint</p>
}

@if (stateCode != null)
{
    <p>@stateCode</p>
}

@if (displayStates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (startDate != null)
    {
        <p><b>Start Date: </b>@startDate</p>
    }
    <table class="table sticky">
        <thead>
            <tr>
                <th>State</th>
                <th>Pos. Cases</th>
                <th>Neg. Cases</th>
                <th>New Cases</th>
                <th>New Neg. Cases</th>
                <th>Curr. Hosp.</th>
                <th>New Hosp.</th>
                <th>Cum. Hosp.</th>
                <th>Curr. ICU</th>
                <th>Cum. ICU</th>
                <th>Total Deaths</th>
                <th>New Deaths</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var state in displayStates)
            {
                <tr>
                    <td>@state.state</td>
                    <td>@state.positive</td>
                    <td>@state.negative</td>
                    <td>@state.positiveIncrease</td>
                    <td>@state.negativeIncrease</td>
                    <td>@state.hospitalizedCurrently</td>
                    <td>@state.hospitalizedIncrease</td>
                    <td>@state.hospitalizedCumulative</td>
                    <td>@state.inIcuCurrently</td>
                    <td>@state.inIcuCumulative</td>
                    <td>@state.death</td>
                    <td>@state.deathIncrease</td>
                </tr>
            }
        </tbody>
    </table>
    @if (exception.Length > 0)
    {
        <p><b>ERROR: </b>@exception</p>
    }
    else
    {
        <p>Loaded with no errors :)</p>
    }
    <h4>
        <b>Authors: Daniel Carson &amp; Aaron Renner</b>
    </h4>
    <h4>
        <b>Data Source:</b> <a href="http://www.covidtracking.com">The COVID Tracking Project</a>
    </h4>
}

@code {
    StateForm stateForm = new StateForm();
    private string stateCode;
    private const int dayAmt = 20;
    private StateData[] currentStates;
    private List<StateData> displayStates;
    private string startDate, exception, endPoint;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            string CurrentStatesEndpoint = Configuration["EndPoints:States:Current"];
            endPoint = CurrentStatesEndpoint;
            currentStates = await Http.GetFromJsonAsync<StateData[]>(endPoint);
            exception = "";
            PopulateCustomFields(currentStates);
            PopulateDates(currentStates);
            PopulateDisplay(currentStates);
        }
        catch (Exception ex)
        {
            exception = ex.Message;
        }
    }
    private void PopulateDisplay(StateData[] states)
    {
        displayStates = new List<StateData>();
        foreach(var state in states)
        {
            if(!state.state.Equals("VI") && !state.state.Equals("AS")) //exclude virgin islands & American Samoa
            {
                displayStates.Add(state);
            }
        }
    }
    private void PopulateDisplay(StateData state)
    {
        displayStates = new List<StateData>();
        displayStates.Add(state);
    }
    private void PopulateCustomFields(StateData[] us)
    {
        for (int i = 0; i < us.Length; i++)
        {
            int date = us[i].date;
            string lastUpdateET = us[i].lastUpdateEt;
            DateTime dt = DateTime.Parse(lastUpdateET); //GetDTFromInt(date);
            if (dt != null)
            {
                us[i].dateTime = dt;
                us[i].displayDate = GetStringFromDT(dt);
            }
            else
            {
                us[i].dateTime = DateTime.Now;
                us[i].displayDate = "N/A";
            }
        }
    }
    private void PopulateDates(StateData[] us)
    {
        int len = us.Length;
        if (len > 0)
        {
            startDate = us[0].dateTime.ToString("dddd, dd MMMM yyyy");
        }
    }
    private DateTime GetDTFromInt(int date)
    {
        int day = date % 100;
        int mon = (date / 100) % 100;
        int year = date / 10000;
        return new DateTime(year, mon, day); ;
    }
    private string GetStringFromDT(DateTime dt)
    {
        return dt.ToString("MM/dd/yyyy");
    }
    private StateData GetSingleState(string stateCode)
    {
        foreach(var state in currentStates)
        {
            if (state.state.Equals(stateCode))
            {
                return state;
            }
        }
        return null;
    }
    private void ChooseState()
    {
        stateCode = stateForm.StateCode;
        stateCode = stateCode.ToUpper();
        StateData sd = GetSingleState(stateCode);
        if(sd != null)
        {
            PopulateDisplay(sd);
        } else if (stateCode.Equals("ALL"))
        {
            PopulateDisplay(currentStates);
        }
        stateForm = new StateForm();
    }
}

@page "/states-current"
@inject HttpClient Http
@inject IConfiguration Configuration

<h2><b>Current States COVID Statistics</b></h2>

@if (endPoint != null)
{
    <p>@endPoint</p>
}

@if (currentStates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (startDate != null)
    {
        <p><b>Start Date: </b>@startDate</p>
    }
    <table class="table">

        <!--New Object for the state data-->
        <TableByState></TableByState>

        <tbody>
            @foreach (var us in currentStates)
            {                
                <tr>
                    <td>@us.state</td>
                    <td>@us.positive</td>
                    <td>@us.negative</td>
                    <td>@us.positiveIncrease</td>
                    <td>@us.negativeIncrease</td>
                    <td>@us.hospitalizedCurrently</td>
                    <td>@us.hospitalizedIncrease</td>
                    <td>@us.hospitalizedCumulative</td>
                    <td>@us.inIcuCurrently</td>
                    <td>@us.inIcuCumulative</td>
                    <td>@us.death</td>
                    <td>@us.deathIncrease</td>
                </tr>
            }
        </tbody>
    </table>
    @if (exception.Length > 0)
    {
        <p><b>ERROR: </b>@exception</p>
    }
    else
    {
        <p>Loaded with no errors :)</p>
    }
    <h4>
        <b>Authors: Daniel Carson &amp; Aaron Renner</b>
    </h4>
    <h4>
        <b>Data Source:</b> <a href="http://www.covidtracking.com">The COVID Tracking Project</a>
    </h4>
}

@code {    
    private const int dayAmt = 20;
    private StateData[] currentStates;
    private string startDate, exception, endPoint;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            string CurrentStatesEndpoint = Configuration["EndPoints:States:Current"];
            endPoint = CurrentStatesEndpoint;
            currentStates = await Http.GetFromJsonAsync<StateData[]>(endPoint);
            exception = "";
            PopulateCustomFields(currentStates);
            PopulateDates(currentStates);
        }
        catch (Exception ex)
        {
            exception = ex.Message;
        }
    }
    private void PopulateCustomFields(StateData[] us)
    {
        for (int i = 0; i < us.Length; i++)
        {
            int date = us[i].date;
            DateTime dt = GetDTFromInt(date);
            if (dt != null)
            {
                us[i].dateTime = dt;
                us[i].displayDate = GetStringFromDT(dt);
            }
            else
            {
                us[i].dateTime = DateTime.Now;
                us[i].displayDate = "N/A";
            }
        }
    }
    private void PopulateDates(StateData[] us)
    {
        int len = us.Length;
        if (len > 0)
        {
            startDate = us[0].dateTime.ToString("dddd, dd MMMM yyyy");
        }
    }
    private DateTime GetDTFromInt(int date)
    {
        int day = date % 100;
        int mon = (date / 100) % 100;
        int year = date / 10000;
        return new DateTime(year, mon, day); ;
    }
    private string GetStringFromDT(DateTime dt)
    {
        return dt.ToString("MM/dd/yyyy");
    }
}

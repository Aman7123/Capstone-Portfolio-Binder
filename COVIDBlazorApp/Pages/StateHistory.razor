@page "/state-history"
@inject HttpClient Http
@inject IConfiguration Configuration

<h2><b>Historical State COVID Statistics</b></h2>

@if (endPoint != null)
{
    <p>@endPoint</p>
}

@if (historicState == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (startDate != null && stopDate != null)
    {
        <p>
            <b>Start Date: </b>@startDate<br />
            <b>Stop Date: </b>@stopDate
        </p>
    }
    <table class="table sticky">
        <thead>
            <tr>
                <th>Date</th>
                <th>Pos. Cases</th>
                <th>Neg. Cases</th>
                <th>New Cases</th>
                <th>New Neg. Cases</th>
                <th>Curr. Hosp.</th>
                <th>New Hosp.</th>
                <th>Cum. Hosp.</th>
                <th>Curr. ICU</th>
                <th>Cum. ICU</th>
                <th>Total Deaths</th>
                <th>New Deaths</th>
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < dayAmt; i++)
            {
                var state = historicState[i];
                <tr>
                    <td>@state.displayDate</td>
                    <td>@state.positive</td>
                    <td>@state.negative</td>
                    <td>@state.positiveIncrease</td>
                    <td>@state.negativeIncrease</td>
                    <td>@state.hospitalizedCurrently</td>
                    <td>@state.hospitalizedIncrease</td>
                    <td>@state.hospitalizedCumulative</td>
                    <td>@state.inIcuCurrently</td>
                    <td>@state.inIcuCumulative</td>
                    <td>@state.death</td>
                    <td>@state.deathIncrease</td>
                </tr>
            }
        </tbody>
    </table>
    @if (exception.Length > 0)
    {
        <p><b>ERROR: </b>@exception</p>
    }
    else
    {
        <p>Loaded with no errors :)</p>
    }
    <h4>
        <b>Authors: Daniel Carson &amp; Aaron Renner</b>
    </h4>
    <h4>
        <b>Data Source:</b> <a href="http://www.covidtracking.com">The COVID Tracking Project</a>
    </h4>
}

@code {
    private const string stateCode = "VA";
    private const int dayAmt = 100;
    private StateData[] historicState;
    private string startDate, stopDate;
    private string exception;
    private string endPoint;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            string historicStateEndpoint = Configuration["EndPoints:State:Historic"];
            endPoint = historicStateEndpoint.Replace("/SC/", ("/" + stateCode + "/"));
            historicState = await Http.GetFromJsonAsync<StateData[]>(endPoint);
            exception = "";
            PopulateCustomFields(historicState);
            PopulateDates(historicState);
        }
        catch (Exception ex)
        {
            exception = ex.Message;
        }
    }
    private void PopulateCustomFields(StateData[] us)
    {
        for (int i = 0; i < us.Length; i++)
        {
            int date = us[i].date;
            string lastUpdateET = us[i].lastUpdateEt;
            DateTime dt = DateTime.Parse(lastUpdateET); //GetDTFromInt(date);
            if (dt != null)
            {
                us[i].dateTime = dt;
                us[i].displayDate = GetStringFromDT(dt);
            }
            else
            {
                us[i].dateTime = DateTime.Now;
                us[i].displayDate = "N/A";
            }
        }
    }
    private void PopulateDates(StateData[] us)
    {
        int len = us.Length;
        if (len >= dayAmt)
        {
            startDate = us[0].dateTime.ToString("dddd, dd MMMM yyyy");
            stopDate = us[(dayAmt - 1)].dateTime.ToString("dddd, dd MMMM yyyy");
        }
        else if (len > 0)
        {
            startDate = us[0].dateTime.ToString("dddd, dd MMMM yyyy");
            stopDate = us[(len - 1)].dateTime.ToString("dddd, dd MMMM yyyy");
        }
    }
    private DateTime GetDTFromInt(int date)
    {
        int day = date % 100;
        int mon = (date / 100) % 100;
        int year = date / 10000;
        return new DateTime(year, mon, day); ;
    }
    private string GetStringFromDT(DateTime dt)
    {
        return dt.ToString("MM/dd/yyyy");
    }
}
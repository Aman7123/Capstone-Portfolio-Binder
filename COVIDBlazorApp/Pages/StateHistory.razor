@page "/state-history"
@inject HttpClient Http
@inject IConfiguration Configuration

<h2><b>Historical State COVID Statistics</b></h2>

@if (historicState == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@stateForm" OnValidSubmit="UpdateParameters">
        <b><label for="stateCode">State Code</label></b><br />
        <InputText id="stateCode" @bind-Value="stateForm.StateCode" /><br />
        <b><label for="startDate" style="margin-top: 10px;">Start Date</label></b><br />
        <InputDate id="startDate" @bind-Value="stateForm.StartDate" /><br />
        <b><label for="stopDate" style="margin-top: 10px;">Stop Date</label></b><br />
        <InputDate id="stopDate" @bind-Value="stateForm.StopDate" /><br />
        <button class="btn btn-outline-primary" style="margin-top:10px; margin-bottom:10px;" type="submit">Submit</button>
    </EditForm>

    <table class="table sticky">
        <thead>
            <tr>
                <th>Date</th>
                <th>Pos. Cases</th>
                <th>Neg. Cases</th>
                <th>New Cases</th>
                <th>New Neg. Cases</th>
                <th>Curr. Hosp.</th>
                <th>New Hosp.</th>
                <th>Cum. Hosp.</th>
                <th>Curr. ICU</th>
                <th>Cum. ICU</th>
                <th>Total Deaths</th>
                <th>New Deaths</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var state in displayData)
            {
                <tr>
                    <td>@state.displayDate</td>
                    <td>@state.positive</td>
                    <td>@state.negative</td>
                    <td>@state.positiveIncrease</td>
                    <td>@state.negativeIncrease</td>
                    <td>@state.hospitalizedCurrently</td>
                    <td>@state.hospitalizedIncrease</td>
                    <td>@state.hospitalizedCumulative</td>
                    <td>@state.inIcuCurrently</td>
                    <td>@state.inIcuCumulative</td>
                    <td>@state.death</td>
                    <td>@state.deathIncrease</td>
                </tr>
            }
        </tbody>
    </table>
    <h4>
        <b>Authors: Daniel Carson &amp; Aaron Renner</b>
    </h4>
    <h4>
        <b>Data Source:</b> <a href="http://www.covidtracking.com">The COVID Tracking Project</a>
    </h4>
}

@code {
    private COVIDRestClient restClient = new COVIDRestClient();
    private StateForm stateForm = new StateForm();
    private string stateCode = "VA";
    private const int dayAmt = 10;
    private StateData[] historicState;
    private List<StateData> displayData;
    private string exception;    
    protected override async Task OnInitializedAsync()
    {
        await LoadData(stateCode);
        PopulateDisplay(historicState);
        PopulateForm(historicState);
    }
    private async Task LoadData(string stateCode)
    {
        try
        {
            historicState = await restClient.GetHistoricState(stateCode);
            PopulateCustomFields(historicState);
            exception = "";
        }
        catch (Exception ex)
        {
            exception = ex.Message;
        }
    }
    private void PopulateDisplay(StateData[] state)
    {
        displayData = new List<StateData>();
        for (int i = 0; i < dayAmt; i++)
        {
            StateData data = state[i];
            displayData.Add(data);
        }
    }
    private void PopulateDisplay(StateData[] state, DateTime start, DateTime stop)
    {
        displayData = new List<StateData>();
        for (int i = 0; i < state.Length; i++)
        {
            StateData data = state[i];
            DateTime date = data.dateTime;
            if (date <= stop && date >= start)
            {
                displayData.Add(data);
            }
        }
    }
    private void PopulateCustomFields(StateData[] state)
    {
        for (int i = 0; i < state.Length; i++)
        {
            int date = state[i].date;
            string lastUpdateET = state[i].lastUpdateEt;
            DateTime dt = GetDTFromInt(date);
            if (dt != null)
            {
                state[i].dateTime = dt;
                state[i].displayDate = GetStringFromDT(dt);
            }
            else
            {
                state[i].dateTime = DateTime.Now;
                state[i].displayDate = "N/A";
            }
        }
    }
    private void PopulateForm(StateData[] state)
    {
        int len = state.Length;
        if (len >= dayAmt)
        {
            stateForm.StartDate = state[(dayAmt - 1)].dateTime;
            stateForm.StopDate = state[0].dateTime;
            stateForm.StateCode = stateCode;
        }
    }
    private DateTime GetDTFromInt(int date)
    {
        int day = date % 100;
        int mon = (date / 100) % 100;
        int year = date / 10000;
        return new DateTime(year, mon, day); ;
    }
    private string GetStringFromDT(DateTime dt)
    {
        return dt.ToString("MM/dd/yyyy");
    }
    private async Task UpdateParameters()
    {
        if (!stateCode.Equals(stateForm.StateCode))
        {
            stateCode = stateForm.StateCode;
            await LoadData(stateCode);
        }
        PopulateDisplay(historicState, stateForm.StartDate, stateForm.StopDate);
    }
}